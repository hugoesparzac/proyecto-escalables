const User = require('../../../infrastructure/database/models/User');

class ValidateEmail {
  constructor(userRepository) {
    this.userRepository = userRepository;
  }
  
  async execute(token) {
    if (!token) {
      throw new Error('Token no proporcionado');
    }
    
    console.log('üîç Buscando usuario con token:', token);
    
    try {
      // Buscar usuario por token usando el repositorio
      const user = await this.userRepository.findByToken(token);
      
      if (!user) {
        console.log('‚ùå Usuario no encontrado con el token proporcionado - intentando b√∫squeda directa en la base de datos');
        
        // Intento directo en la base de datos como respaldo
        const dbUser = await User.findOne({ token: token });
        
        if (!dbUser) {
          console.log('‚ùå Usuario no encontrado ni siquiera en la base de datos');
          throw new Error('Token de validaci√≥n inv√°lido o expirado. Por favor solicita un nuevo enlace de validaci√≥n.');
        }
        
        console.log('‚úÖ Usuario encontrado directamente en la base de datos:', dbUser.correo);
        
        // Validar email directamente
        dbUser.validada = true;
        dbUser.token = null;
        dbUser.updatedAt = new Date();
        
        const savedUser = await dbUser.save();
        
        console.log('‚úÖ Correo validado para (v√≠a b√∫squeda directa):', savedUser.correo);
        
        return {
          user: savedUser.toJSON(),
          message: 'Correo electr√≥nico validado exitosamente'
        };
      }
      
      console.log('‚úÖ Usuario encontrado v√≠a repositorio:', user.correo);
      
      // Actualizar el usuario a trav√©s del repositorio
      const updatedUser = await this.userRepository.validateEmail(user.id_usuario);
      
      if (!updatedUser) {
        console.log('‚ùå Error al actualizar v√≠a repositorio, intentando actualizaci√≥n directa');
        
        // Intento directo en la base de datos como respaldo
        const updated = await User.findOneAndUpdate(
          { token: token },
          { validada: true, token: null, updatedAt: new Date() },
          { new: true }
        );
        
        if (!updated) {
          throw new Error('Error al validar el correo electr√≥nico');
        }
        
        console.log('‚úÖ Correo validado para (v√≠a actualizaci√≥n directa):', updated.correo);
        
        return {
          user: updated.toJSON(),
          message: 'Correo electr√≥nico validado exitosamente'
        };
      }
      
      console.log('‚úÖ Correo validado para (v√≠a repositorio):', updatedUser.correo);
      
      return {
        user: updatedUser.toJSON(),
        message: 'Correo electr√≥nico validado exitosamente'
      };
    } catch (error) {
      console.error('‚ùå Error durante la validaci√≥n de email:', error);
      throw error;
    }
  }
}

module.exports = ValidateEmail;